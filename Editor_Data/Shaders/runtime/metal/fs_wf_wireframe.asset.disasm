using namespace metal;
struct xlatMtlShaderInput {
  bool gl_FrontFacing [[front_facing]];
  float3 v_bc;
};
struct xlatMtlShaderOutput {
  float4 gl_FragColor;
};
struct xlatMtlShaderUniform {
  float4 u_params[2];
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float opacity_1 = 0;
  float3 tmpvar_2 = 0;
  tmpvar_2 = _mtl_u.u_params[0].xyz;
  float tmpvar_3 = 0;
  tmpvar_3 = _mtl_u.u_params[0].w;
  opacity_1 = tmpvar_3;
  float tmpvar_4 = 0;
  tmpvar_4 = _mtl_u.u_params[1].x;
  if (_mtl_i.gl_FrontFacing) {
    opacity_1 = (tmpvar_3 * 0.4);
  };
  float3 tmpvar_5 = 0;
  float3 tmpvar_6 = 0;
  tmpvar_6 = clamp ((_mtl_i.v_bc / (
    (abs(dfdx(_mtl_i.v_bc)) + abs(dfdy(-_mtl_i.v_bc)))
   * tmpvar_4)), 0.0, 1.0);
  tmpvar_5 = (tmpvar_6 * (tmpvar_6 * (3.0 - 
    (2.0 * tmpvar_6)
  )));
  float4 tmpvar_7 = 0;
  tmpvar_7.xyz = tmpvar_2;
  tmpvar_7.w = ((1.0 - min (
    min (tmpvar_5.x, tmpvar_5.y)
  , tmpvar_5.z)) * opacity_1);
  _mtl_o.gl_FragColor = tmpvar_7;
  return _mtl_o;
}

