#pragma once

#include "core/graphics/graphics.h"
#include <string>

struct uniform
{
	//-----------------------------------------------------------------------------
	//  Name : ~Uniform ()
	/// <summary>
	/// 
	/// 
	/// 
	/// </summary>
	//-----------------------------------------------------------------------------
	~uniform();

	//-----------------------------------------------------------------------------
	//  Name : dispose ()
	/// <summary>
	/// 
	/// 
	/// 
	/// </summary>
	//-----------------------------------------------------------------------------
	void dispose();

	//-----------------------------------------------------------------------------
	//  Name : is_valid ()
	/// <summary>
	/// 
	/// 
	/// 
	/// </summary>
	//-----------------------------------------------------------------------------
	bool is_valid() const;

	//-----------------------------------------------------------------------------
	//  Name : populate ()
	/// <summary>
	/// 
	/// 
	/// 
	/// </summary>
	//-----------------------------------------------------------------------------
	void populate(const std::string& _name, gfx::UniformType::Enum _type, std::uint16_t _num = 1);

	//-----------------------------------------------------------------------------
	//  Name : populate ()
	/// <summary>
	/// 
	/// 
	/// 
	/// </summary>
	//-----------------------------------------------------------------------------
	void populate(gfx::UniformHandle _handle);

	/// Uniform info
	gfx::UniformInfo info;
	/// Internal handle
	gfx::UniformHandle handle = { gfx::kInvalidHandle };
};